import math;
from PIL import Image;
import matplotlib.pyplot as plt;
import os;

class Datastruct:
    def __init__(self):
        self.featDim  : float = 0;
        self.dataDim  : float = 0;
        self.innerDim : float = 0;
        self.dataItems: list[float] = [];
        self.ready: bool = False;
    def InsertKernel(self, kernel: list[float]) -> None:
        if not self.ready:
            arrDim: int = int(math.sqrt(len(kernel)));
            self.featDim = arrDim;
            self.dataDim = arrDim;
            self.innerDim = arrDim * arrDim;
            self.ready = True;
        self.dataItems = kernel;
    def RangeByIndex(self, indexPos: int) -> list[float]:
        collection: list[float] = [];
        for pos in range(self.featDim):
            if(pos < self.featDim):
                location: int = (indexPos * self.featDim) + pos;
                collection.append(self.dataItems[location]);
            else:
                break;
        return collection;

def BlurImg(array: list[float], deviation: float) -> list[float]:
    first = 1 / math.sqrt((2*math.pi) * pow(deviation,2));
    aa = [first *  math.exp(-pow(x,2)/(2*pow(deviation,2))) for x in array];
    mi = min(aa)
    ma = max(aa)
    return [(abs(x-mi) / ma)*255 for x in aa];

def ApplyFilterOnPosition(pos: int, pixels: list[float], dts: Datastruct) -> (bool, bool, list[float]):
    imDim = int(math.sqrt(len(pixels)));
    breakStep: bool = False;
    breakLoop: bool = False;
    results: list[float] = [];
    
    for i in range(dts.featDim):
        p: int = (i * imDim) + pos;
        key: int = 0;
        for j in range(p, p+dts.featDim,1):
            calc: float = pixels[j] * dts.RangeByIndex(i)[key];
            results.append(calc);
            key += 1;
        
            if (pos != 0) and ((j + 1) % imDim == 0):
                breakStep = True;
            if (pos != 0) and ((j + 1) == len(pixels)):
                breakLoop = True;
    return (breakStep, breakLoop, results);

def ApplyFilterOnPixels(pixels: list[float], dtc: Datastruct) -> list[float]:
    imDim = int(math.sqrt(len(pixels)))
    collection: list[float] = [];
    multiplier: int = 1;
    position: int = -1;
    for i in range(len(pixels)):
        position += 1;
        breakStep, breakLoop, result = ApplyFilterOnPosition(position, pixels, dtc);
        collection.append(sum(result));

        if breakLoop:
            break;
        if breakStep:
            position = ((imDim * 1) * multiplier)-1;
            multiplier += 1;
    
    
    relu = [x if x > 0 else 0 for x in collection]
    mi = min(relu);
    ma = max(relu);
    return [ (abs(x-mi)/ma)*255 for x in collection];

dts: Datastruct = Datastruct();
dts.InsertKernel([1,0,-1, 1,0,-1, 1,0,-1])

roots = "C:/Users/NAS/Desktop/dseeet/testSample/testSample"
for root in os.listdir(roots):
    tmp = f"{roots}/{root}"
    im = Image.open(tmp).convert("L");
    im = im.resize((128,128))
    imData = list(im.getdata())
    data = ApplyFilterOnPixels(imData, dts);
    size = int(math.sqrt(len(data)));
    view1 = [imData[x: x+im.width] for x in [x for x in range(0, len(imData), im.height)]];
    view2 = [data[x: x+size] for x in [x for x in range(0, len(data), size)]];
    plt.subplot(1,2,1)
    plt.imshow(view1)
    plt.subplot(1,2,2)
    plt.imshow(view2)
    plt.axis("off")
    plt.show()
