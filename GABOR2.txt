import numpy as np
import matplotlib.pyplot as plt

def generate_gabor_filter(ksize, frequency, theta, sigma, gamma):
    """
    Generates a Gabor filter kernel.

    Args:
        ksize (int): Kernel size (odd number).
        frequency (float): Frequency of the Gabor filter.
        theta (float): Orientation of the Gabor filter (in radians).
        sigma (float): Gaussian envelope spread.
        gamma (float): Aspect ratio (elongation).

    Returns:
        np.ndarray: Gabor filter kernel.
    """
    half_size = ksize // 2
    x, y = np.meshgrid(np.arange(-half_size, half_size + 1), np.arange(-half_size, half_size + 1))

    x_prime = x * np.cos(theta) + y * np.sin(theta)
    y_prime = -x * np.sin(theta) + y * np.cos(theta)

    gabor_kernel = np.exp(-(x_prime ** 2 + gamma ** 2 * y_prime ** 2) / (2 * sigma ** 2)) * np.cos(2 * np.pi * frequency * x_prime)

    return gabor_kernel

# Define Gabor filter parameters
ksize = 5
frequency = 0.2
theta = np.pi / 4
sigma = 3.0
gamma = 0.5

# Generate the Gabor filter
gabor_filter = generate_gabor_filter(ksize, frequency, theta, sigma, gamma)

# Display the Gabor filter
plt.imshow(gabor_filter, cmap='gray')
plt.title(f"Gabor Filter (Frequency = {frequency})")
plt.axis('off')
plt.show()


ksize = 21
frequency = 0.2
theta = 11
sigma = 1.0
gamma = 0.05
pi = np.pi;
gabor_filter = generate_gabor_filter(ksize, frequency, theta, sigma, gamma)

rads = [ 0, pi / 6, 2* pi /6, 3 * pi /6 , 4 * pi / 6, 5 * pi / 6 ];
freqs = [.1, 0.2, 0.4, 0.5, 0.6, 0.7];
gammas = [.5,.4,.3,.2,.1,.05]
collection = [];

for freq in freqs:
    for rad in rads:
        for gam in gammas:
            collection.append(generate_gabor_filter(ksize, freq, rad, sigma, gam));
pass

for vid, view in enumerate(collection):
    plt.subplot(6,36,vid+1)
    plt.imshow(view)
    plt.axis("off")
plt.show();
